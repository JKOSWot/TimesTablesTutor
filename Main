package model;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Port;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;

public class Main {

	//Logger
	private Logger logger = Logger.getLogger(getClass().getName());

	//Variables
	private String result;
	private Object lock = new Object();

	//Threads
	Thread	speechThread;
	Thread	resourcesThread;

	// LiveRecognizer
	private LiveSpeechRecognizer recognizer;
	
	/*
	 * lock function only allows one method to 
	 * work at one time
	 */
	public String getResult() {
		synchronized (lock) {
			String r = result;
			result = null;
			return r;
		}
	}
	
	public void setResult(String r) {
		synchronized (lock) {
			result = r;
		}
	}

	/**
	 * Constructor
	 */
	public Main() {

		//Loading Message
		//logger.log(Level.INFO, "Loading..\n");

		//Configuration
		Configuration configuration = new Configuration();

		//Load model from the jar
		configuration.setAcousticModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us");
		configuration.setDictionaryPath("resource:/edu/cmu/sphinx/models/en-us/cmudict-en-us.dict");

		// Grammar
		configuration.setGrammarPath("resource:/grammars");
		configuration.setGrammarName("grammar");
		configuration.setUseGrammar(true);

		try {
			recognizer = new LiveSpeechRecognizer(configuration);
		} catch (IOException ex) {
			//logger.log(Level.SEVERE, null, ex);
		}

		// Start recognition process pruning previously cached data.
		recognizer.startRecognition(true);

		// Start the Thread
		beginSpeechThread();
		beginResourcesThread();
	}

	/**
	 * Starting the main Thread of speech recognition
	 */
	protected void beginSpeechThread() {

		// alive?
		if (speechThread != null && speechThread.isAlive())
			return;

		// initialise
		speechThread = new Thread(
				new Runnable() {
				public void run() {
			//logger.log(Level.INFO, "You can start to speak...\n");
			try {
				while (true) {
					/*
					 * This method will return when the end of speech is
					 * reached. Note that the end pointer will determine the end
					 * of speech.
					 */
					SpeechResult speechResult = recognizer.getResult();
					if (speechResult != null) {
						setResult(speechResult.getHypothesis());
						//System.out.println("You said: [" + result + "]\n");
							//logger.log(Level.INFO, "You said: " + result + "\n");
					} else
						logger.log(Level.INFO, "I can't understand what you said.\n");
				}
			} catch (Exception ex) {
				//logger.log(Level.WARNING, null, ex);
			}
			//logger.log(Level.INFO, "SpeechThread has exited...");
		}});
		// Start
		speechThread.start();
	}

	protected void beginResourcesThread() {

		// alive?
		if (resourcesThread != null && resourcesThread.isAlive())
			return;

		resourcesThread = new Thread(new Runnable() {
			public void run() {
			try {
				// Detect if the microphone is available
				while (true) {
					if (AudioSystem.isLineSupported(Port.Info.MICROPHONE)) {
						//logger.log(Level.INFO, "Microphone is available.\n");
					} else {
						//logger.log(Level.INFO, "Microphone is not available.\n");
					}
					Thread.sleep(350);
				}
			} catch (InterruptedException ex) {
				//logger.log(Level.WARNING, null, ex);
				resourcesThread.interrupt();
			}
		}});
		// Start
		resourcesThread.start();
	}

	public static void main(String[] args) {
		new Main();
	}
}
